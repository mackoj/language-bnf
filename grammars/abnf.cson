# syntax highlighting rule for Augmented Backus-Naur Form (ABNF)
# ABNF is documented in RFC 5234. This is file applies rule very loosely
# Original author: Jarmo Kivekas
# Date: July 2015

fileTypes: []
name: "ABNF"
patterns: [
  # These ruels appear here as well as in the 'expression' rule
  # because of how multi-line syntactic elements are handled
  {include: '#comment.line'}
  {include: '#constant.numeric.hexadecimal'}
  {include: '#constant.numeric.decimal'}
  {include: '#constant.numeric.binary'}
  {include: '#string.quoted.double'}
  {include: '#constant.core-rule'}
  {
    name: 'keyword.operator.assignment'
    match: '='
  }
  {
    # liberally matches a rule definition line
    # rule names start with a letter
    match: '^\\s*([a-zA-Z][-a-zA-Z0-9]*)\\s*(=)(.*)$'
    captures:
      '1':
        name: 'entity.name.function.bnf'
      '2':
        name: 'keyword.operator.assignment'
      # the rules below are applied to everything on the right side
      # of the assignment operator
      '3':
        name: 'expression'
        patterns:[
          {include: '#constant.numeric.hexadecimal'}
          {include: '#constant.numeric.decimal'}
          {include: '#constant.numeric.binary'}
          {include: '#string.quoted.double'}
          {include: '#constant.core-rule'}
          {include: '#comment.line'}
        ]
  }
]

repository:
  # semi-colon end of line comment
  'comment.line':
    match: '\\s*(;.*)$'
    captures:
      '1':
        name: 'comment.line.semi-colon.bnf'
  # sets of core-rules pre-defined by the language (Appendix B.)
  'constant.core-rule':
    match: '(ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)'
    captures:
      '1':
        name: 'constant.string.core-rule.bnf'

  # numeric constants like %d12-52 %b01011 %x0A.42.12
  # the range (-) and concatenation (.) operator should
  # not be mixed. However this rule recognizes eg. %d12-42.24
  'constant.numeric.hexadecimal':
    name: "constant.numeric.hexadecimal.bnf"
    match: '%x[0-9A-F]+([-\\.][0-9A-F]+)*'
  'constant.numeric.binary':
    name: "constant.numeric.binary.bnf"
    match: '%b[01]+([-\\.][10]+)*'
  'constant.numeric.decimal':
    name: "constant.numeric.decimal.bnf"
    match: '%d[0-9]+([-\\.][0-9]+)*'
  'string.quoted.double':  
    begin: '"'
    end: '"'
    name: 'string.quoted.double.bnf'
scope: "source.abnf"
scopeName: "source.abnf"
